#!/usr/bin/env python
# -*- coding: utf-8 -*-
""" SMPDF """
from __future__ import print_function
import sys
import os
import os.path as osp
import argparse
import shelve
import shutil
import logging

from smpdflib.initialization import init_app


import applwrap
import smpdflib.actions as actions



__author__ = 'Stefano Carrazza, Zahari Kassabov'
__license__ = 'GPL'
__version__ = '1.0rc1'
__email__ = 'stefano.carrazza@mi.infn.it'



def make_output_dir(output_dir):
    if not osp.exists(output_dir):
        os.makedirs(output_dir)
    elif not osp.isdir(output_dir):
        print("'output' is not a directory", file=sys.stderr)
        sys.exit(1)
    figpath = osp.join(output_dir,"figures")
    if not osp.isdir(figpath):
        os.mkdir(figpath)



def splash():
    s =  ("""
  ███████╗███╗   ███╗██████╗ ██████╗ ███████╗
  ██╔════╝████╗ ████║██╔══██╗██╔══██╗██╔════╝
  ███████╗██╔████╔██║██████╔╝██║  ██║█████╗
  ╚════██║██║╚██╔╝██║██╔═══╝ ██║  ██║██╔══╝
  ███████║██║ ╚═╝ ██║██║     ██████╔╝██║
  ╚══════╝╚═╝     ╚═╝╚═╝     ╚═════╝ ╚═╝
  __version__: %s"
  __authors__: S. Carrazza, Z. Kassabov
""")%__version__
    print(s)




def main():
    parser = argparse.ArgumentParser(
        description = "Compare phenomenology for arrays of applgrids "
         "and pdfsets. "
         "Fill yaml configuration files with the specification of the pdfsets, "
         "observables and actions (see examples for details).\n\n%s" %
         actions.gen_docs(),
       formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('config_yml',
                        help = "path to the configuration file")

    #TODO: Use db by default?
    parser.add_argument('--use-db', nargs='?', help="use Python database"
    " file of results and do not recompute those already in there"
    "If a file is not passed 'db/db' will be used", metavar='dbfile',
    const='db/db', default=None)

    parser.add_argument('-o','--output', help="output folder where to "
                                         "store resulting plots and tables",
                        default='output')

    loglevel = parser.add_mutually_exclusive_group()

    loglevel.add_argument('-q','--quiet', help="Supress INFO messages",
                        action='store_true')

    loglevel.add_argument('-d', '--debug', help = "Show debug info",
                          action='store_true')

    args = parser.parse_args()

    if args.quiet:
        level = logging.WARN
    elif args.debug:
        level = logging.DEBUG
    else:
        level = logging.INFO

    logging.basicConfig(format='%(levelname)s: %(message)s', level=level)


    splash()

    init_app()


    import smpdflib.config as config


    # read yml file
    try:
        with open(args.config_yml,'r') as f:
            conf = config.Config.from_yaml(f)
    except config.ConfigError as e:
        print("Bad configuration encountered:\n%s" % str(e),
              file=sys.stderr)
        sys.exit(1)
    except IOError as e:
        print("Cannot load configuration file:\n%s" % e.strerror,
              file=sys.stderr)
        sys.exit(1)
    make_output_dir(args.output)

    shutil.copy(args.config_yml, args.output)

    #TODO: handle this better

    dbfolder = args.use_db
    if dbfolder:
        dirname = osp.dirname(dbfolder)
        if dirname and not osp.isdir(dirname):
            os.makedirs(dirname)
        db = shelve.open(args.use_db)
    else:
        db = None

    if not logging.getLogger().isEnabledFor(logging.DEBUG):
        applwrap.setverbosity(0)
    try:
        results = actions.execute_config(conf, args.output ,db=db)
    except actions.ActionRuntimeError as e:
        logging.critical(e)
        print("An action failed: %s" % e, file=sys.stderr)
        if logging.getLogger().isEnabledFor(logging.DEBUG):
            raise
        sys.exit(1)
    finally:
        #bool(db) == False if empty
        if db is not None:
            db.close()


if __name__ == '__main__':
    main()
